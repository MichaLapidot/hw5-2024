import pathlib
from typing import Tuple, Union
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_filename: Union[pathlib.Path, str]):
        """
        Initializes the QuestionnaireAnalysis object.

        Parameters
        ----------
        data_filename : Union[pathlib.Path, str]
            Path to the JSON file containing the questionnaire data.
        """
        try:
            self.data_fname = pathlib.Path(data_filename).resolve()
        except TypeError:
            raise TypeError("ERROR: Please supply a string or a pathlib.Path instance to the class.")
        
        if not self.data_fname.exists():
            raise ValueError(f"File {str(self.data_fname)} doesn't exist.")

    def read_data(self):
        """
        Reads the JSON data located in self.data_fname into memory,
        storing it in the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """
        Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin.
        bins : np.ndarray
            Bin edges.
        """
        # Define bin edges for ages from 0 to 100 in steps of 10.
        age_bins = np.arange(0, 101, 10)
        # Create a histogram of ages.
        _, ax = plt.subplots()
        histogram_counts, bin_edges, _ = ax.hist(self.data["age"].dropna(), bins=age_bins)  # Drop NaN ages
        # Set labels and title for the histogram.
        ax.set_xlabel("Age")
        ax.set_ylabel("Counts")
        ax.set_title("Age Distribution of Participants")
        # Display the plot.
        plt.show()
        return histogram_counts, bin_edges
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """
        Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and the index reset.
        """
        valid_email_mask = self.data["email"].apply(self._is_valid_email)
        valid_email_df = self.data.loc[valid_email_mask].reset_index(drop=True)
        return valid_email_df

    def _is_valid_email(self, email: str) -> bool:
        """
        Checks if an email is valid.

        Parameters
        ----------
        email : str
            The string to validate

        Returns
        -------
        bool
            True if email is valid, False otherwise
        """
        if not isinstance(email, str):
            return False
        at_pos = email.find("@")
        dot_pos = email.rfind(".")

        return (
            at_pos > 0 and  # "@" not at the start
            dot_pos > at_pos + 1 and  # "." appears after "@" and not immediately after
            not email.endswith(".") and  # email does not end with "."
            not email.endswith("@") and  # email does not end with "@"
            not email.startswith(".") and  # email does not start with "."
            not email.startswith("@") and  # email does not start with "@"
            email.count("@") == 1  # exactly one "@" sign
        )

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """
        Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces the missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade.
        arr : np.ndarray
            Row indices of the students whose new grades were generated.
        """
        # Copy the original DataFrame to avoid modifying it directly
        corrected_data = self.data.copy()
        
        # The columns containing the grades for questions
        question_columns = ["q1", "q2", "q3", "q4", "q5"]

        # Indices of rows with missing values in the question columns
        rows_with_missing_values = corrected_data[question_columns].isnull().any(axis=1).to_numpy().nonzero()[0]

        for row_idx in rows_with_missing_values:
            # Fetch the row
            row = corrected_data.loc[row_idx, question_columns]
            
            # Calculate the mean of the non-missing values
            mean_value = row.mean()
            
            # Fill the missing values with the calculated mean
            corrected_data.loc[row_idx, question_columns] = row.fillna(mean_value)
        
        return corrected_data, rows_with_missing_values

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """
        Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in their grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score should be UInt8, and the floating point raw numbers should be
        rounded down before the conversion.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        # Copy the original DataFrame to avoid modifying it directly
        scored_data = self.data.copy()
        
        # The columns containing the grades for questions
        question_columns = ["q1", "q2", "q3", "q4", "q5"]
        
        # Calculate the number of NaNs per row
        num_nans_per_row = self.data[question_columns].isna().sum(axis=1)
        
        # Calculate the scores by averaging the grades where there are less than maximal_nans_per_sub NaNs
        scores = self.data[question_columns].mean(axis=1, skipna=True).apply(lambda x: np.floor(x)).astype(pd.UInt8Dtype())
        
        # Set the score to pd.NA for rows with more than maximal_nans_per_sub NaNs
        scores[num_nans_per_row > maximal_nans_per_sub] = pd.NA
        
        # Add the scores to the DataFrame as a new column
        scored_data["score"] = scores
        
        return scored_data

    def correlate_gender_age(self) -> pd.DataFrame:
        """
        Looks for a correlation between the gender of the subject, their age,
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        # Drop rows with missing age values
        filtered_data = self.data.dropna(subset=['age'])
    
        # Create a new column 'age_group' indicating whether age is above 40
        filtered_data['age_group'] = filtered_data['age'] > 40
    
        # Group by 'gender' and 'age_group' and calculate mean of the question columns
        grouped_data = filtered_data.groupby(['gender', 'age_group'])[['q1', 'q2', 'q3', 'q4', 'q5']].mean()
    
        # Rename the 'age_group' index to 'age' to match the expected result
        grouped_data.index.set_names(['gender', 'age'], inplace=True)

        # Return the grouped data
        return grouped_data




    
    
    


    